generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String?
  sessions      Session[]
  emailVerified DateTime?
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
  image         String?
  Like          Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Post {
  id             String    @id @default(cuid())
  restaurantName String    @unique
  location       String
  foodname       String
  rating         Float
  description    String
  userId         Int
  likes          Like[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       Comment[]
  images         Image[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  postId    String
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
